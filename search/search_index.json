{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"screen_ocr","text":"<p>The <code>screen_ocr</code> repository is a Python library designed for performing Optical Character Recognition (OCR) on screen captures. It abstracts the complexities of different OCR backends, providing a consistent API for developers. The library also offers useful functions for searching and extracting text from the OCR results. </p> <p>The library depends on several other Python packages:</p> <ul> <li><code>pillow</code>: Used for image manipulation, such as resizing and converting between color formats.</li> <li><code>rapidfuzz</code>: Used for fast, fuzzy string matching when searching for words within the OCR results.</li> <li><code>numpy</code>: Used for numerical computations, often required by image processing and some OCR backends.</li> <li><code>pytesseract</code>: Used by the Tesseract backend to perform OCR.</li> <li><code>pandas</code>: Used by the Tesseract backend for data manipulation.</li> <li><code>scikit-image</code>: Used by the Tesseract and EasyOCR backends for image processing tasks.</li> <li><code>winsdk</code>: Used by the WinRT backend to interact with the Windows OCR API.</li> <li><code>easyocr</code>: Used by the EasyOCR backend to perform OCR.</li> <li><code>imagehash</code>: Used in testing to avoid near-duplicate images.</li> <li><code>pytest</code>: Used for running unit tests.</li> <li><code>scikit-learn</code>: Used in testing to train and evaluate OCR performance.</li> </ul> <p>The repository is structured as follows:</p> <ul> <li>The .github directory contains configuration files for GitHub. It includes a workflow in .github/workflows that deploys a repository guide using the <code>wolfmanstout/deploy-repo-guide@v1</code> action.</li> <li>The core functionality of the library is in the screen_ocr directory. This directory contains the <code>_base.py</code>, <code>_screen_ocr.py</code> and different OCR backend implementations, each in its own file: <code>_easyocr.py</code>, <code>_talon.py</code>, <code>_tesseract.py</code>, and <code>_winrt.py</code>. <ul> <li>The <code>_base.py</code> file defines the base classes and data structures used by all OCR backends.</li> <li>The <code>_screen_ocr.py</code> file defines the main interface, including the <code>Reader</code> and <code>ScreenContents</code> classes. The <code>Reader</code> class manages backend configuration and runs the OCR process. The <code>ScreenContents</code> class provides functionality for searching and extracting text from the OCR results.</li> <li>The backend files (<code>_easyocr.py</code>, <code>_talon.py</code>, <code>_tesseract.py</code>, and <code>_winrt.py</code>) implement specific OCR engines and integrate them with the base classes.</li> <li>The <code>__init__.py</code> file makes all the symbols from <code>_screen_ocr.py</code> available at the <code>screen_ocr</code> package level.</li> <li>The <code>__main__.py</code> file provides a simple command-line interface for running OCR on the current screen.</li> </ul> </li> <li>The tests directory includes unit tests. The tests use <code>screen_ocr_test.py</code> to verify the correctness of text searching methods of <code>ScreenContents</code>. The files <code>test_utils.py</code> and <code>test_utils_test.py</code> verify the correctness of the testing utilities.</li> <li>The file <code>.git-blame-ignore-revs</code> is used to ignore a commit that reformatted the entire codebase, to make it easier to use git blame.</li> <li>The file <code>.gitattributes</code> contains configurations that handle line endings on different platforms.</li> <li>The file <code>.gitignore</code> contains patterns of files that should be ignored by git.</li> <li>The file <code>.pre-commit-config.yaml</code> configures a pre-commit hook using <code>ruff</code> to format and lint the code.</li> <li>The file <code>.python-version</code> specifies the Python version used for development, specifically 3.11.</li> <li>The file <code>LICENSE</code> contains the Apache 2.0 license that governs the use of the repository.</li> <li>The file <code>pyproject.toml</code> specifies project metadata, build configurations, and dependencies.</li> <li>The file <code>README.md</code> provides a basic overview of the library, including installation instructions.</li> <li>The file <code>screen_ocr_tool.py</code> is a command-line tool for running OCR on a set of images and evaluating its performance.</li> <li>The file <code>uv.lock</code> contains dependency information used for consistent resolution of dependencies.</li> </ul> <p>The library provides a flexible and extensible way to perform screen OCR by supporting various OCR backends and offering different configuration options. The different backends provide tradeoffs in terms of speed and accuracy, allowing the user to choose the backend that best suits their needs.</p>"},{"location":"_github/","title":".github","text":"<p>The <code>screen_ocr/.github</code> directory contains configuration files related to the GitHub repository.</p> <p>The <code>workflows</code> subdirectory contains automation workflows for the repository. The most important workflow is defined in <code>deploy_repo_guide.yml</code>. This workflow is triggered manually and is used to generate and deploy a repository guide. It uses the <code>wolfmanstout/deploy-repo-guide@v1</code> action, which is expected to handle the guide's generation and deployment.</p>"},{"location":"_github/workflows/","title":"workflows","text":"<p>The <code>screen_ocr/.github/workflows</code> directory contains workflows that automate tasks related to the repository.</p> <p>The file <code>deploy_repo_guide.yml</code> defines a GitHub Actions workflow named \"Publish documentation generated by repo-guide\". This workflow is triggered manually using <code>workflow_dispatch</code>. It is responsible for deploying the repository guide to a location that can be accessed by users. The workflow checks out the code and then runs the <code>wolfmanstout/deploy-repo-guide@v1</code> action, passing in the LLM API key. This action is expected to generate and deploy the repository guide.</p>"},{"location":"screen_ocr/","title":"screen_ocr","text":"<p>The <code>screen_ocr</code> directory contains the core logic for performing screen OCR. It provides a <code>Reader</code> class that can be configured to use different OCR backends, and a <code>ScreenContents</code> class that represents the results of an OCR operation.</p> <p>The following files are of particular interest:</p> <ul> <li> <p><code>_base.py</code>: This file defines the base classes used by all OCR backends. It includes dataclasses for <code>OcrWord</code>, <code>OcrLine</code>, and <code>OcrResult</code>, as well as an abstract <code>OcrBackend</code> class. This provides a common interface for all the backend implementations.</p> </li> <li> <p><code>_screen_ocr.py</code>: This file contains the main logic for the <code>screen_ocr</code> library. It defines the <code>Reader</code> class, which is responsible for creating and configuring OCR backends, as well as methods for capturing screenshots and running OCR. It also contains the <code>ScreenContents</code> class, which represents the results of an OCR operation and provides methods for searching for words and extracting text. The <code>Reader</code> class also includes methods for creating readers optimized for speed or quality, and allows for a variety of configuration options, such as the thresholding function, block size, and debugging callbacks.</p> <p>The <code>ScreenContents</code> class provides functionality for fuzzy word matching with homophone support and methods for finding words nearest to a given cursor position or screen coordinates. It also includes logic for finding the longest matching prefix or suffix of a given search string. The <code>ScreenContents</code> class does not contain the logic to perform OCR, that is the responsibility of the backend. Instead, it processes the result and offers a set of search and selection methods.</p> </li> <li> <p><code>_easyocr.py</code>: This file implements the <code>EasyOcrBackend</code>, which uses the <code>easyocr</code> library to perform OCR. It subclasses <code>OcrBackend</code> and provides an implementation of the <code>run_ocr</code> method.</p> </li> <li> <p><code>_talon.py</code>: This file implements the <code>TalonBackend</code>, which uses the <code>ocr</code> module in the Talon voice control system to perform OCR. It subclasses <code>OcrBackend</code> and provides an implementation of the <code>run_ocr</code> method. It also includes logic to adjust the bounding boxes of the words to be more accurate.</p> </li> <li> <p><code>_tesseract.py</code>: This file implements the <code>TesseractBackend</code>, which uses the <code>pytesseract</code> library to perform OCR. It subclasses <code>OcrBackend</code> and provides an implementation of the <code>run_ocr</code> method. It includes various preprocessing options such as thresholding and channel shifting to improve OCR accuracy.</p> </li> <li> <p><code>_winrt.py</code>: This file implements the <code>WinRtBackend</code>, which uses the Windows Runtime API to perform OCR. It subclasses <code>OcrBackend</code> and provides an implementation of the <code>run_ocr</code> method. It runs all winsdk interactions on a new thread to avoid errors with thread modes.</p> </li> <li> <p><code>__init__.py</code>: This file makes all the symbols from <code>_screen_ocr.py</code> available at the <code>screen_ocr</code> package level.</p> </li> <li> <p><code>__main__.py</code>: This file provides a simple command-line interface for performing OCR on the current screen contents.</p> </li> </ul> <p>The different backends (<code>_easyocr.py</code>, <code>_talon.py</code>, <code>_tesseract.py</code>, and <code>_winrt.py</code>) provide different options for performing the actual OCR, allowing users to choose the best backend for their needs. The <code>_screen_ocr.py</code> file acts as the central component, providing a unified API for interacting with these different backends and also providing useful text searching and selection methods.</p>"},{"location":"tests/","title":"tests","text":"<p>The <code>screen_ocr/tests</code> directory contains files for testing the <code>screen_ocr</code> library.</p> <p><code>screen_ocr_test.py</code> contains unit tests for core functionality in the <code>screen_ocr</code> module. For example, it tests <code>ScreenContents.find_longest_matching_suffix</code> and <code>ScreenContents._generate_candidates_from_line</code>, which are used to search for text within the OCR results.</p> <p><code>test_utils.py</code> defines utility classes for testing OCR, including <code>OcrEstimator</code>, which is an estimator class for use in scikit-learn pipelines. It configures a <code>screen_ocr.Reader</code> with parameters for image processing like thresholding, resizing, and grayscale conversion. The <code>score</code> method evaluates performance using a Levenshtein distance metric by comparing OCR results to ground truth text, as defined by the <code>cost</code> method.</p> <p><code>test_utils_test.py</code> contains unit tests for the <code>test_utils.py</code> module. It specifically tests the <code>cost</code> function by asserting that strings that are closer to the ground truth have lower cost (and are thus considered better).</p>"}]}