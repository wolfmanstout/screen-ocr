{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"screen_ocr","text":"<p>The <code>screen_ocr</code> repository provides a Python library for performing Optical Character Recognition (OCR) on screen regions. It supports multiple OCR backends, including Tesseract, EasyOCR, WinRT, and Talon. The library is designed to be easy to use while also being flexible and extensible. The primary use case for this library is to programmatically extract text from the screen, which can be used for various purposes, including automation and accessibility.</p> <p>The library has the following dependencies:</p> <ul> <li><code>pillow</code>: Used for image manipulation, including opening images, resizing, and color space conversion.</li> <li><code>rapidfuzz</code>: Used for fuzzy string matching in the text search functionality.</li> <li><code>numpy</code>: Used by the Tesseract and EasyOCR backends for array manipulation and image preprocessing.</li> <li><code>pytesseract</code>: Used by the Tesseract backend to perform OCR.</li> <li><code>pandas</code>: Used by the Tesseract backend to improve the accuracy of OCR.</li> <li><code>scikit-image</code>: Used by the Tesseract backend for image processing operations, including thresholding.</li> <li><code>winsdk</code>: Used by the WinRT backend to access the Windows OCR API.</li> <li><code>easyocr</code>: Used by the EasyOCR backend to perform OCR.</li> <li><code>imagehash</code>: Used in the testing script to identify near-duplicate images.</li> <li><code>pytest</code>: Used to run unit tests.</li> <li><code>scikit-learn</code>: Used to evaluate the OCR results and perform grid searches for optimal parameters.</li> </ul> <p>The <code>.github</code> directory contains configuration for GitHub, including GitHub Actions workflows. The most important workflow is located in <code>.github/workflows/deploy_repo_guide.yml</code>, which is used to deploy the repository documentation.</p> <p>The <code>screen_ocr</code> directory contains the core logic of the library. The primary entry point is the <code>Reader</code> class in <code>_screen_ocr.py</code>. This class encapsulates the functionality for performing OCR on screen regions. It supports multiple backends (Tesseract, EasyOCR, WinRT, and Talon), allowing the user to choose the best backend for their specific use case. The <code>ScreenContents</code> class, also in <code>_screen_ocr.py</code>, stores the results of OCR operations and provides methods for searching for text within the OCR results. The backend implementations are located in separate files: <code>_tesseract.py</code>, <code>_easyocr.py</code>, <code>_winrt.py</code>, and <code>_talon.py</code>. These files implement the <code>OcrBackend</code> interface defined in <code>_base.py</code>. The <code>__init__.py</code> file makes the classes and functions from <code>_screen_ocr.py</code> available in the <code>screen_ocr</code> package, and <code>__main__.py</code> provides a command-line interface.</p> <p>The <code>tests</code> directory contains the test suite for the <code>screen_ocr</code> library. The file <code>screen_ocr_test.py</code> contains unit tests for the <code>ScreenContents</code> class, specifically focusing on the text search logic. The file <code>test_utils.py</code> provides utility functions and classes for testing, including a cost function to evaluate the quality of the OCR results and an <code>OcrEstimator</code> class for evaluating different OCR configurations. <code>test_utils_test.py</code> contains unit tests for the <code>cost</code> function.</p> <p>Other files in the repository include:</p> <ul> <li><code>.git-blame-ignore-revs</code>: Specifies commits to ignore when using <code>git blame</code>.</li> <li><code>.gitattributes</code>: Specifies how line endings should be handled by Git.</li> <li><code>.gitignore</code>: Specifies intentionally untracked files that Git should ignore.</li> <li><code>.pre-commit-config.yaml</code>: Configuration file for pre-commit hooks. It uses ruff for linting and formatting.</li> <li><code>.python-version</code>: Specifies the Python version used in the project.</li> <li><code>LICENSE</code>: The license file for the project (Apache 2.0).</li> <li><code>pyproject.toml</code>: Specifies project metadata and dependencies, including optional dependencies for each backend.</li> <li><code>README.md</code>: Contains the primary documentation for the library.</li> <li><code>screen_ocr_tool.py</code>: A tool used for debugging and evaluating the OCR library. It allows the user to run OCR on a set of images and evaluate the results, as well as grid search over different configuration options.</li> </ul> <p>The <code>screen_ocr_tool.py</code> provides a way to test and improve the accuracy of the library. It can be run in <code>debug</code> mode to output detailed information about the processing of a set of test images, and it can be run in <code>grid_search</code> mode to evaluate the impact of different preprocessing options. The pre-commit configuration in <code>.pre-commit-config.yaml</code> is used to format and lint the code, ensuring that it adheres to a consistent style and reduces the chances of introducing errors.</p>"},{"location":".github/","title":".github","text":"<p>The <code>screen_ocr/.github</code> directory contains configuration for GitHub.</p> <p>The <code>workflows</code> subdirectory contains configuration files for GitHub Actions workflows.</p> <p>The file <code>deploy_repo_guide.yml</code> defines a workflow named \"Publish documentation generated by repo-guide.\" This workflow is triggered manually using <code>workflow_dispatch</code>. It is used to deploy the repository guide. The workflow uses the <code>actions/checkout@v4</code> action to check out the repository, and then uses the <code>wolfmanstout/deploy-repo-guide@v1</code> action to generate and deploy the documentation using a Gemini key stored as a secret.</p>"},{"location":".github/workflows/","title":"workflows","text":"<p>The <code>screen_ocr/.github/workflows</code> directory contains configuration files for GitHub Actions workflows.</p> <p>The file <code>deploy_repo_guide.yml</code> defines a workflow named \"Publish documentation generated by repo-guide.\" This workflow is triggered manually using <code>workflow_dispatch</code>. It is used to deploy the repository guide. The workflow uses the <code>actions/checkout@v4</code> action to check out the repository, and then uses the <code>wolfmanstout/deploy-repo-guide@v1</code> action to generate and deploy the documentation using a Gemini key stored as a secret.</p>"},{"location":"screen_ocr/","title":"screen_ocr","text":"<p>The <code>screen_ocr</code> directory contains the core logic for the screen-ocr library. It provides a high-level API for performing OCR on screen regions, while supporting multiple OCR backends.</p> <p>The most important files are:</p> <ul> <li> <p><code>_screen_ocr.py</code>: This file contains the main <code>Reader</code> class, which is the primary entry point for using the library. It also contains the <code>ScreenContents</code> class, which is used to store the results of OCR operations. The <code>Reader</code> class supports multiple backends (Tesseract, EasyOCR, WinRT, and Talon), and provides methods for creating readers optimized for quality or speed. It also handles screen capture, image preprocessing, and result postprocessing. The <code>ScreenContents</code> class provides methods for searching for specific text on the screen, including fuzzy matching and homophone handling.</p> </li> <li> <p><code>_base.py</code>: This file defines the base classes used by the various backend implementations. It defines <code>OcrWord</code>, <code>OcrLine</code>, <code>OcrResult</code> as dataclasses, and <code>OcrBackend</code> as an abstract class that all concrete backends must inherit from.</p> </li> <li> <p><code>_tesseract.py</code>: This file implements the Tesseract OCR backend. It uses the <code>pytesseract</code> library to perform OCR, and it also implements several image preprocessing steps to improve OCR accuracy, including channel shifting, thresholding, and background correction.</p> </li> <li> <p><code>_easyocr.py</code>: This file implements the EasyOCR backend. It uses the <code>easyocr</code> library to perform OCR.</p> </li> <li> <p><code>_winrt.py</code>: This file implements the WinRT OCR backend, which is available on Windows. It uses the Windows SDK to perform OCR. It initializes the engine on a background thread to avoid threading issues, and performs asynchronous calls.</p> </li> <li> <p><code>_talon.py</code>: This file implements the Talon OCR backend, which uses the experimental <code>talon.experimental.ocr</code> API. It also includes logic to adjust the bounding boxes of words to more tightly fit the text.</p> </li> <li> <p><code>__init__.py</code>: This file makes the classes and functions from <code>_screen_ocr.py</code> available in the <code>screen_ocr</code> package.</p> </li> <li> <p><code>__main__.py</code>: This file provides a simple command-line interface for performing OCR on the screen.</p> </li> </ul> <p>The files in this directory work together as follows:</p> <p>The user interacts with the <code>Reader</code> class in <code>_screen_ocr.py</code>, which acts as a facade. The user selects an OCR backend (Tesseract, EasyOCR, WinRT, or Talon) when creating a <code>Reader</code> instance. The <code>Reader</code> class captures the screen (or a portion of it), preprocesses the image, and then delegates the OCR operation to the selected backend. The backend-specific files (<code>_tesseract.py</code>, <code>_easyocr.py</code>, <code>_winrt.py</code>, <code>_talon.py</code>) implement the <code>OcrBackend</code> interface from <code>_base.py</code>, and they use their respective OCR libraries or APIs to perform the actual OCR. The results from the backend are returned to the <code>Reader</code> which creates a <code>ScreenContents</code> object. The <code>ScreenContents</code> object stores the OCR results and provides methods for searching and manipulating the text.</p>"},{"location":"tests/","title":"tests","text":"<p>The <code>screen_ocr/tests</code> directory contains test files for the <code>screen_ocr</code> library. It includes tests for the core functionality as well as utilities for running and evaluating the tests.</p> <ul> <li> <p><code>screen_ocr_test.py</code> contains unit tests for the <code>ScreenContents</code> class. The tests focus on verifying the logic used to locate text within an OCR result. <code>test_find_longest_matching_suffix</code> confirms that the correct words are located when searching for a suffix within a block of OCRed text. <code>test_generate_candidates_from_line</code> confirms that the correct word locations are generated when parsing a line of OCRed text, including splitting words at case changes. These tests are critical for ensuring that the text search and selection functions of the <code>screen_ocr</code> library are working correctly.</p> </li> <li> <p><code>test_utils.py</code> provides utility functions and classes used for testing the OCR functionality. The <code>cost</code> function calculates the \"cost\" of an OCR result compared to a ground truth text, which is used to evaluate the accuracy of the OCR results. The <code>OcrEstimator</code> class is a scikit-learn estimator that can be used to train and evaluate different OCR configurations. The class provides a way to change the image preprocessing methods including thresholding, resizing, converting to grayscale, and shifting color channels before running OCR. This allows for a systematic evaluation of the impact of different image processing settings on OCR accuracy.</p> </li> <li> <p><code>test_utils_test.py</code> contains unit tests for the utility functions defined in <code>test_utils.py</code>, specifically the <code>cost</code> function. It ensures that the function correctly calculates the cost (or similarity) between two strings. These tests are necessary to ensure that the evaluation metrics used in the project are accurate.</p> </li> </ul>"}]}