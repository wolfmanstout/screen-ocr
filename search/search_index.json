{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"screen_ocr","text":"<p>The <code>screen_ocr</code> repository is a Python library that provides functionality for performing Optical Character Recognition (OCR) on screen captures or images. It supports multiple OCR backends, including WinRT (Windows-only), Tesseract (cross-platform), and EasyOCR (experimental). The core logic of the library is in the <code>screen_ocr</code> directory, with tests and utilities in the <code>tests</code> directory. The <code>.github</code> directory contains configuration files for GitHub Actions.</p> <p>The library has the following dependencies:</p> <ul> <li><code>pillow</code>: Used for image manipulation and processing.</li> <li><code>rapidfuzz</code>: Used for fuzzy string matching when finding words on the screen.</li> <li>Optional dependencies:<ul> <li><code>numpy</code>, <code>pytesseract</code>, <code>pandas</code>, <code>scikit-image</code>: Used for the Tesseract OCR backend.</li> <li><code>winsdk</code>: Used for the WinRT OCR backend.</li> <li><code>easyocr</code>, <code>numpy</code>: Used for the EasyOCR backend.</li> </ul> </li> </ul> <p>The <code>screen_ocr</code> directory contains the following important files:</p> <ul> <li> <p><code>_base.py</code>: Defines the base classes for OCR backends including data structures for words and lines of text, and the abstract <code>OcrBackend</code> class.</p> </li> <li> <p><code>_screen_ocr.py</code>: The primary file that defines the <code>Reader</code> class which is used to perform OCR using different backends, and the <code>ScreenContents</code> class which stores the results of an OCR operation.</p> </li> <li> <p><code>_easyocr.py</code>: Implements the <code>EasyOcrBackend</code> using the <code>easyocr</code> library.</p> </li> <li> <p><code>_talon.py</code>: Implements the <code>TalonBackend</code> using the Talon voice control system's OCR capabilities.</p> </li> <li> <p><code>_tesseract.py</code>: Implements the <code>TesseractBackend</code> using the <code>pytesseract</code> library.</p> </li> <li> <p><code>_winrt.py</code>: Implements the <code>WinRtBackend</code> using the Windows Runtime OCR API.</p> </li> <li> <p><code>__init__.py</code>: Makes classes available when the package is imported.</p> </li> <li> <p><code>__main__.py</code>: Provides a basic command-line interface for running OCR.</p> </li> </ul> <p>The <code>tests</code> directory contains the following important files:</p> <ul> <li> <p><code>screen_ocr_test.py</code>: Contains unit tests for the core functionality of the screen-ocr library.</p> </li> <li> <p><code>test_utils.py</code>: Provides utility classes and functions for testing, including the <code>OcrEstimator</code> class for comparing different text extraction pipelines.</p> </li> <li> <p><code>test_utils_test.py</code>: Contains unit tests for the utilities defined in <code>test_utils.py</code>.</p> </li> </ul> <p>The <code>.github</code> directory contains workflow configuration for GitHub Actions:</p> <ul> <li><code>deploy_repo_guide.yml</code>: A workflow that publishes documentation generated by the <code>repo-guide</code> tool.</li> </ul> <p>Other important files in the repository:</p> <ul> <li><code>pyproject.toml</code>: Defines the project metadata and dependencies.</li> <li><code>README.md</code>: Provides a high-level overview of the library, installation instructions, and basic usage examples.</li> <li><code>screen_ocr_tool.py</code>: A tool for debugging and grid searching different OCR configurations.</li> </ul> <p>The library is structured to allow for easy extension with additional OCR backends by implementing a class that inherits from the <code>OcrBackend</code> abstract base class defined in <code>_base.py</code>. The main use case of the <code>Reader</code> class in <code>_screen_ocr.py</code> is to handle preprocessing steps such as resizing and converting images to grayscale.</p>"},{"location":"_github/","title":".github","text":"<p>The <code>screen_ocr/.github</code> directory contains configuration files for GitHub.</p> <p>The <code>workflows</code> subdirectory contains workflow definitions for GitHub Actions. These workflows automate tasks related to the repository.</p> <p>The <code>deploy_repo_guide.yml</code> file defines a workflow named \"Publish documentation generated by repo-guide\". This workflow is manually triggered using <code>workflow_dispatch</code>. It is responsible for deploying documentation generated by the <code>repo-guide</code> tool. The workflow performs the following steps:</p> <ul> <li>It checks out the repository using the <code>actions/checkout@v4</code> action.</li> <li>It uses the <code>wolfmanstout/deploy-repo-guide@v1</code> action to deploy the documentation. This action requires a <code>gemini-key</code> secret to be provided.</li> </ul>"},{"location":"_github/workflows/","title":"workflows","text":"<p>The <code>screen_ocr/.github/workflows</code> directory contains workflow definitions for GitHub Actions. These workflows automate tasks related to the repository.</p> <p>The <code>deploy_repo_guide.yml</code> file defines a workflow named \"Publish documentation generated by repo-guide\". This workflow is manually triggered using <code>workflow_dispatch</code>. It is responsible for deploying documentation generated by the <code>repo-guide</code> tool. The workflow performs the following steps:</p> <ul> <li>It checks out the repository using the <code>actions/checkout@v4</code> action.</li> <li>It uses the <code>wolfmanstout/deploy-repo-guide@v1</code> action to deploy the documentation. This action requires a <code>gemini-key</code> secret to be provided.</li> </ul>"},{"location":"screen_ocr/","title":"screen_ocr","text":"<p>The <code>screen_ocr</code> directory contains the core logic for the screen-ocr library. It provides a way to perform OCR on a screen or a portion of the screen, using different backend OCR engines.</p> <p>Here's a breakdown of the key files and how they work together:</p> <ul> <li> <p><code>_base.py</code>: This file defines the base classes used by the different OCR backend implementations. It includes dataclasses for <code>OcrWord</code>, <code>OcrLine</code>, and <code>OcrResult</code>, as well as the <code>OcrBackend</code> abstract base class with a <code>run_ocr</code> method.</p> </li> <li> <p><code>_screen_ocr.py</code>: This is the main file for the library. It includes the <code>Reader</code> class, which is used to perform OCR using a selected backend. It also contains the <code>ScreenContents</code> class which stores the results of an OCR operation, and <code>WordLocation</code> class which represents a single word in the <code>ScreenContents</code>. The <code>Reader</code> class provides methods to create readers optimized for either speed or quality, and a generic method to create a <code>Reader</code> with a specified backend. It has methods to read from the screen or an image, and it handles preprocessing of the image before sending it to the backend. It uses fuzzy matching to find words on the screen.</p> </li> <li> <p><code>_easyocr.py</code>: This file implements the <code>EasyOcrBackend</code>, which uses the <code>easyocr</code> library to perform OCR. It inherits from the <code>OcrBackend</code> class defined in <code>_base.py</code>. It transforms the output from easyocr into an <code>OcrResult</code>.</p> </li> <li> <p><code>_talon.py</code>: This file implements the <code>TalonBackend</code>, which uses the OCR capabilities of the Talon voice control system. It inherits from the <code>OcrBackend</code> class defined in <code>_base.py</code>. It also contains some logic to adjust the bounding boxes of the recognized words to be more accurate.</p> </li> <li> <p><code>_tesseract.py</code>: This file implements the <code>TesseractBackend</code>, which uses the <code>pytesseract</code> library to perform OCR. It inherits from the <code>OcrBackend</code> class defined in <code>_base.py</code>. It also includes image preprocessing such as thresholding and channel shifting to improve OCR results.</p> </li> <li> <p><code>_winrt.py</code>: This file implements the <code>WinRtBackend</code>, which uses the Windows Runtime OCR API. It inherits from the <code>OcrBackend</code> class defined in <code>_base.py</code>. It runs the OCR on a separate thread because the Windows Runtime API must be used on a thread with a specific mode, which prevents it from running on the main thread.</p> </li> <li> <p><code>__init__.py</code>: This file makes the classes in <code>_screen_ocr.py</code> available when the package is imported.</p> </li> <li> <p><code>__main__.py</code>: This file provides a basic command-line interface for the library. It creates a reader and prints the text on the screen to standard output.</p> </li> </ul> <p>In summary, the library provides a high-level <code>Reader</code> class that can use a variety of backend OCR engines. The <code>_screen_ocr.py</code> file is the core of the library, with the various <code>_*.py</code> files implementing the different backends.</p>"},{"location":"tests/","title":"tests","text":"<p>The <code>screen_ocr/tests</code> directory contains tests for the screen-ocr library. It includes unit tests and utilities for evaluating the performance of OCR models.</p> <p>The most important files are:</p> <ul> <li> <p><code>screen_ocr_test.py</code>: This file contains unit tests for the core functionality of the screen-ocr library. The tests focus on validating the <code>ScreenContents</code> class including its ability to find matching suffixes and generate word candidates from OCR results.  These tests use mock <code>OcrResult</code> objects, so they do not test the actual OCR functionality.</p> </li> <li> <p><code>test_utils.py</code>: This file provides utility classes and functions used for testing. The <code>OcrEstimator</code> class is particularly important; it allows for the creation of an OCR reader with configurable pre-processing steps for comparing different text extraction pipelines. It also defines a <code>cost</code> function that uses <code>rapidfuzz</code> to compute a similarity score between strings, which is used to evaluate OCR accuracy. The preprocessing steps include thresholding, resizing, grayscaling, and channel shifting.</p> </li> <li> <p><code>test_utils_test.py</code>: This file contains unit tests specifically for the utilities defined in <code>test_utils.py</code>. It primarily tests the <code>cost</code> function, ensuring that it correctly calculates similarity between strings.  The <code>setUp</code> method is empty, meaning that each test function is independent.</p> </li> </ul> <p>These files work together to ensure that the core screen-ocr functionality is working as expected and that the preprocessing steps of the OCR pipeline can be evaluated. <code>screen_ocr_test.py</code> tests the core logic, while the <code>test_utils</code> files provide tools and metrics for more comprehensive evaluation.</p>"}]}