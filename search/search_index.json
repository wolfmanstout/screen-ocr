{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"screen_ocr","text":"<p>The <code>screen_ocr</code> repository is a Python library for performing Optical Character Recognition (OCR) on screen captures. It supports multiple backends for OCR, including Tesseract, EasyOCR, WinRT, and Talon. The library is designed to be easy to use, and provides a high-level API for performing OCR and processing results. The main goal of the library is to provide a consistent interface for performing OCR using different backends. It also aims to provide utilities for finding text within the OCR results, including fuzzy matching and homophone handling.</p> <p>The library has the following dependencies, which are specified in the <code>pyproject.toml</code> file:</p> <ul> <li><code>pillow</code>: Used for image manipulation, such as resizing and converting to grayscale. This is a direct dependency for the library.</li> <li><code>rapidfuzz</code>: Used for fuzzy string matching, which is used when searching for text in OCR results. This is also a direct dependency.</li> <li><code>numpy</code>: Used by some of the optional backends (tesseract, easyocr), and is required when using those backends.</li> <li><code>pytesseract</code>: Used by the Tesseract backend. This is an optional dependency, required when using the Tesseract backend.</li> <li><code>pandas</code>: Used by the Tesseract backend, presumably for managing image data. This is an optional dependency, required when using the Tesseract backend.</li> <li><code>scikit-image</code>: Used by the Tesseract backend for preprocessing images. This is an optional dependency, required when using the Tesseract backend.</li> <li><code>winsdk</code>: Used by the WinRT backend. This is an optional dependency, required when using the WinRT backend.</li> <li><code>easyocr</code>: Used by the easyocr backend. This is an optional dependency, required when using the easyocr backend.</li> </ul> <p>The <code>screen_ocr</code> directory contains the core logic for the library. The most important files are:</p> <ul> <li><code>screen_ocr/_base.py</code>: Defines the base classes for the library, including <code>OcrWord</code>, <code>OcrLine</code>, <code>OcrResult</code>, and the abstract <code>OcrBackend</code> class.</li> <li><code>screen_ocr/_screen_ocr.py</code>:  Provides the high-level API for the library, including the <code>Reader</code> class for creating OCR readers with specified backends, and the <code>ScreenContents</code> class for storing and processing OCR results. It also includes logic for fuzzy matching, homophone handling, and more.</li> <li><code>screen_ocr/_easyocr.py</code>: Implements the <code>OcrBackend</code> interface using the <code>easyocr</code> library.</li> <li><code>screen_ocr/_talon.py</code>: Implements the <code>OcrBackend</code> interface using the <code>talon</code> library.</li> <li><code>screen_ocr/_tesseract.py</code>: Implements the <code>OcrBackend</code> interface using the <code>pytesseract</code> library.</li> <li><code>screen_ocr/_winrt.py</code>: Implements the <code>OcrBackend</code> interface using the Windows Runtime (WinRT) API for OCR.</li> <li><code>screen_ocr/__init__.py</code>: Exposes the contents of <code>_screen_ocr.py</code> to the user.</li> <li><code>screen_ocr/__main__.py</code>: Provides a simple command-line interface for the library.</li> </ul> <p>The <code>tests</code> directory contains tests for the library. The most important files are:</p> <ul> <li><code>tests/screen_ocr_test.py</code>: Contains unit tests for the core functionality of the library.</li> <li><code>tests/test_utils.py</code>: Defines utility classes and functions to help with testing, such as the <code>cost</code> function to evaluate OCR results and the <code>OcrEstimator</code> class for use in integration tests.</li> <li><code>tests/test_utils_test.py</code>: Contains unit tests for the utility functions defined in <code>test_utils.py</code>.</li> </ul> <p>The <code>.github</code> directory contains configuration files for GitHub. The most important subdirectory is:</p> <ul> <li><code>_github/workflows</code>: Contains GitHub Actions workflows for the repository. The workflow at <code>_github/workflows/deploy_repo_guide.yml</code> generates and publishes the repository documentation.</li> </ul> <p>Other important files in the repository include:</p> <ul> <li><code>LICENSE</code>: Specifies that the library is licensed under the Apache License 2.0.</li> <li><code>pyproject.toml</code>: Defines the project metadata and dependencies.</li> <li><code>README.md</code>: Provides an overview of the library, installation instructions, and usage examples.</li> <li><code>screen_ocr_tool.py</code>: A script for debugging and performing grid searches to evaluate OCR settings and parameters. It allows for analysis of success and failure cases and provides image viewing during debugging.</li> </ul> <p>The <code>screen_ocr_tool.py</code> script is a utility for evaluating the performance of the OCR library. It loads image and text data, performs OCR, and calculates a cost based on the fuzzy match ratio between the OCR result and the ground truth text. The script includes a debugging mode which displays the ground truth text and the results of the OCR, and a grid search mode for evaluating different parameters of the underlying OCR backends using cross-validation.</p>"},{"location":"_github/","title":".github","text":"<p>The <code>screen_ocr/.github</code> directory contains configuration files for GitHub.</p> <p>The <code>workflows</code> subdirectory contains GitHub Actions workflows for the repository.</p> <p>The most important workflow is located at <code>workflows/deploy_repo_guide.yml</code>. This workflow is triggered manually and is responsible for generating and publishing the repository documentation. It uses the <code>wolfmanstout/deploy-repo-guide@v1</code> action, which presumably uses the <code>gemini-key</code> secret to generate the documentation.</p>"},{"location":"_github/workflows/","title":"workflows","text":"<p>The <code>screen_ocr/.github/workflows</code> directory contains GitHub Actions workflows for the repository.</p> <p>The file <code>deploy_repo_guide.yml</code> defines a workflow named \"Publish documentation generated by repo-guide\". This workflow is triggered manually via <code>workflow_dispatch</code>. It checks out the repository, then uses the <code>wolfmanstout/deploy-repo-guide@v1</code> action to deploy the repository guide. The action requires a <code>gemini-key</code> secret, which is presumably used to generate the documentation. This workflow is responsible for generating and publishing documentation for the repository.</p>"},{"location":"screen_ocr/","title":"screen_ocr","text":"<p>The <code>screen_ocr</code> directory contains the core logic for the <code>screen-ocr</code> library. It provides functionality to perform OCR on screen captures using different backends.</p> <p>The most important files are:</p> <ul> <li> <p><code>_base.py</code>: Defines the base classes for the library, including <code>OcrWord</code>, <code>OcrLine</code>, <code>OcrResult</code>, and the abstract <code>OcrBackend</code> class. These classes establish a common interface for different OCR implementations.</p> </li> <li> <p><code>_screen_ocr.py</code>: This is the main file that provides the high-level API for the library. It contains the <code>Reader</code> class, which is used to create OCR readers with specified backends, and the <code>ScreenContents</code> class, which stores and processes the results of OCR. It also includes logic for fuzzy matching, homophone handling, and more. The <code>Reader</code> class is designed to be the main entry point for users of the library. It supports multiple backends, such as tesseract, easyocr, winrt, and talon, and allows users to configure them through the <code>create_reader</code> method. It also provides convenience methods such as <code>create_quality_reader</code> and <code>create_fast_reader</code>. <code>ScreenContents</code> encapsulates the result of an OCR operation, providing a variety of useful methods for accessing and processing the extracted text and its location on screen.</p> </li> </ul> <p>The other files provide specific backend implementations:</p> <ul> <li> <p><code>_easyocr.py</code>: Implements the <code>OcrBackend</code> interface using the <code>easyocr</code> library. It initializes <code>easyocr.Reader</code> with the English language and uses its <code>readtext</code> method to perform OCR, converting the result to the format used by <code>screen-ocr</code>.</p> </li> <li> <p><code>_talon.py</code>: Implements the <code>OcrBackend</code> interface using the <code>talon</code> library. This backend relies on the experimental OCR functionality of <code>talon</code>, and includes some platform specific adjustments for bounding boxes.</p> </li> <li> <p><code>_tesseract.py</code>: Implements the <code>OcrBackend</code> interface using the <code>pytesseract</code> library. It also includes preprocessing steps such as thresholding, grayscale conversion, and channel shifting. These preprocessing steps are designed to improve the accuracy of the OCR results.</p> </li> <li> <p><code>_winrt.py</code>: Implements the <code>OcrBackend</code> interface using the Windows Runtime (WinRT) API for OCR. It runs all winsdk interactions in a background thread to avoid thread mode issues, and uses an async function to perform OCR operations.</p> </li> <li> <p><code>__init__.py</code>: Exposes the contents of <code>_screen_ocr.py</code> to the user when importing the <code>screen_ocr</code> package.</p> </li> <li> <p><code>__main__.py</code>: Provides a simple command-line interface for the library, allowing users to perform OCR on their screen and print the results to standard output.</p> </li> </ul> <p>These files work together as follows: The <code>Reader</code> class in <code>_screen_ocr.py</code> acts as the main entry point. It takes a backend (e.g., Tesseract, EasyOCR, etc.) as a constructor argument. The chosen backend is an implementation of the abstract <code>OcrBackend</code> in <code>_base.py</code>. When the <code>read_screen</code>, <code>read_nearby</code>, or <code>read_image</code> methods of the <code>Reader</code> are called, the appropriate backend implementation is used to perform OCR on the captured image. The <code>ScreenContents</code> class in <code>_screen_ocr.py</code> then provides methods for accessing and processing the OCR results.</p>"},{"location":"tests/","title":"tests","text":"<p>The <code>screen_ocr/tests</code> directory contains tests for the screen-ocr library. It includes files for unit tests and utilities for testing.</p> <ul> <li> <p><code>screen_ocr_test.py</code> contains unit tests for the core functionality of the screen-ocr library. For example, <code>test_find_longest_matching_suffix</code> tests the <code>find_longest_matching_suffix</code> method of the <code>ScreenContents</code> class, which is used to locate a substring within the text extracted from the screen. The <code>test_generate_candidates_from_line</code> test verifies the logic for generating candidate word locations from OCR result lines. These tests demonstrate the expected behavior of the <code>ScreenContents</code> class in finding text on the screen.</p> </li> <li> <p><code>test_utils.py</code> defines utility classes and functions to help with testing.  The <code>cost</code> function calculates a cost based on the fuzzy match ratio between the result of the OCR and the ground truth text. The <code>OcrEstimator</code> class implements a scikit-learn compatible estimator for performing OCR with different settings for thresholding and preprocessing.  It is used in integration tests to quickly evaluate different parameter combinations.</p> </li> <li> <p><code>test_utils_test.py</code> contains unit tests for the utility functions defined in <code>test_utils.py</code>.  The tests in <code>TestUtilsTestCase</code> demonstrate the use of the <code>cost</code> function, ensuring that it correctly scores strings based on their similarity to a ground truth string. This test suite confirms the behavior of the cost function, which plays a central role in evaluating OCR performance.</p> </li> </ul> <p>Together these test files ensure that the core library functions, that the utility functions behave as expected, and they provide a framework for testing the OCR performance with a variety of different settings.</p>"}]}